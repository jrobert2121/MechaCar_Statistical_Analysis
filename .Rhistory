# Call the function with the student vector as an argument.
roll_call(students)
?roll_call
# Call the function with the student vector as an argument.
roll_call
# Call the function with the student vector as an argument.
attendance <- roll_call(students)
print(students)
# Part I
students <- c(Abraham, Beatrice, Cory, Eric, Felicia)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Eric", "Felicia")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (name in students) {
return(name)
}
}
# Call the function with the student vector as an argument.
attendance <- roll_call(students)
View(roll_call)
View(roll_call)
# Call the function with the student vector as an argument.
roll_call(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (name in students) {
print(name)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
print(name, "locker combination:" `sample(33,3)`)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
print(name, "locker combination:")
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
View(locker_combinations)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
print(paste(name, sample(33,3)))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
print(paste(name, "sample(33,3)"))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
cat(name, sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
cat(name, sample(33,3)\n)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
cat(name, sample(33,3),\n)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
cat(name, "locker combination:\n")
cat(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
cat(sample(33,3))\n
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
cat(name, "locker combination:\n")
cat(sample(33,3)'\n')
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in students){
cat(name, "locker combination:\n")
cat(sample(33,3))
cat("\n")
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
print(letter2)
print(letter2)
print(letter2)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
str <- students
# Create an if statement to find the names of students where the
# second letter that is an "e".
if substring(str,2,2) == "e"
print(str)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
str <- students
# Create an if statement to find the names of students where the
# second letter that is an "e".
if substr(str,2,2) == "e"
print(str)
}
?substring
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
x <- students
# Create an if statement to find the names of students where the
# second letter that is an "e".
if substr(x,2,2) == "e"
print(x)
}
# Create an if statement to find the names of students where the
# second letter that is an "e".
if substr(x,2,2) == "e"
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
x <- student
# Create an if statement to find the names of students where the
# second letter that is an "e".
if substr(x,2,2) == e
print(x)
}
setwd("C:/Users/Jenny/msu/hw/15/MechaCar_Statistical_Analysis")
library(dplyr)
mpg_table <- read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
View(mpg_table)
lm(vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data = mpg_table)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mpg_table)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mpg_table))
suspension_coil <- read.csv(file = 'Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
View(suspension_coil)
table_summary <- suspension_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=stderr(PSI))
table_summary <- suspension_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI))
View(table_summary)
table_summary <- suspension_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(table_summary)
table_summary <- suspension_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(table_summary)
table_summary <- suspension_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'drop')
View(table_summary)
table_summary <- suspension_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'rowwise')
View(table_summary)
?summarize()
table_summary <- suspension_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(suspension_coil)
suspension_coil_by_PSI <- suspension_coil %>% group_by(PSI)
View(suspension_coil_by_PSI)
table_summary <- suspension_coil_by_PSI %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(table_summary)
table_summary <- suspension_coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(table_summary)
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(lot_summary)
?t.test()
View(table_summary)
# T-tests on Suspension Coils
# across all lots
t.test(suspension_coil$PSI, mu=1500)
View(suspension_coil)
# across each lot
t.test(subset(suspension_coil, Manufacturing_Lot == 'Lot1')$PSI, mu=1500)
t.test(subset(suspension_coil, Manufacturing_Lot == 'Lot2')$PSI, mu=1500)
t.test(subset(suspension_coil, Manufacturing_Lot == 'Lot3')$PSI, mu=1500)
